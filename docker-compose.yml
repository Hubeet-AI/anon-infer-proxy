version: '3.8'

services:
  # Main anon-infer-proxy service
  anon-proxy:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: anon-infer-proxy
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - VAULT_ENDPOINT=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN:-}
      - VAULT_MOUNT_PATH=secret
      - VAULT_VERIFY_TLS=false
    ports:
      - "3000:3000"
    depends_on:
      - vault
    networks:
      - anon-proxy-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development service
  anon-proxy-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: anon-infer-proxy-dev
    environment:
      - NODE_ENV=development
      - VAULT_ENDPOINT=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN:-}
      - VAULT_MOUNT_PATH=secret
      - VAULT_VERIFY_TLS=false
    ports:
      - "3001:3000"
    depends_on:
      - vault
    networks:
      - anon-proxy-network
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    command: npm run dev
    profiles:
      - dev

  # HashiCorp Vault for secure storage
  vault:
    image: vault:1.15.2
    container_name: anon-proxy-vault
    restart: unless-stopped
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_TOKEN:-myroot}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_ADDR=http://0.0.0.0:8200
    ports:
      - "8200:8200"
    networks:
      - anon-proxy-network
    volumes:
      - vault-data:/vault/data
      - vault-logs:/vault/logs
    cap_add:
      - IPC_LOCK
    command: vault server -dev -dev-root-token-id=${VAULT_TOKEN:-myroot}
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Vault initialization service
  vault-init:
    image: vault:1.15.2
    container_name: anon-proxy-vault-init
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN:-myroot}
    networks:
      - anon-proxy-network
    depends_on:
      vault:
        condition: service_healthy
    volumes:
      - ./scripts/vault-init.sh:/vault-init.sh:ro
    command: /bin/sh /vault-init.sh
    profiles:
      - init

  # Test runner service
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile
      target: test
    container_name: anon-proxy-tests
    environment:
      - NODE_ENV=test
      - VAULT_ENDPOINT=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN:-myroot}
      - VAULT_MOUNT_PATH=secret
      - VAULT_VERIFY_TLS=false
    depends_on:
      vault:
        condition: service_healthy
    networks:
      - anon-proxy-network
    volumes:
      - ./coverage:/app/coverage
    command: npm run test:coverage
    profiles:
      - test

  # Example OpenAI integration
  openai-example:
    build:
      context: ./examples
      dockerfile: Dockerfile.openai
    container_name: anon-proxy-openai-example
    environment:
      - ANON_PROXY_URL=http://anon-proxy:3000
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
    depends_on:
      - anon-proxy
    networks:
      - anon-proxy-network
    volumes:
      - ./examples/logs:/app/logs
    profiles:
      - examples

  # Example vLLM integration
  vllm-example:
    build:
      context: ./examples
      dockerfile: Dockerfile.vllm
    container_name: anon-proxy-vllm-example
    environment:
      - ANON_PROXY_URL=http://anon-proxy:3000
      - VLLM_ENDPOINT=${VLLM_ENDPOINT:-http://localhost:8000}
    depends_on:
      - anon-proxy
    networks:
      - anon-proxy-network
    volumes:
      - ./examples/logs:/app/logs
    profiles:
      - examples

  # Monitoring and metrics (optional)
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: anon-proxy-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    networks:
      - anon-proxy-network
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:10.1.0
    container_name: anon-proxy-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    networks:
      - anon-proxy-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    profiles:
      - monitoring

networks:
  anon-proxy-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  vault-data:
    driver: local
  vault-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
