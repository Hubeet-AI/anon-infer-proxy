name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check TypeScript compilation
      run: npm run build

  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm run test:coverage
      env:
        NODE_ENV: test
        
    - name: Upload coverage to Codecov
      if: matrix.node-version == 18
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      vault:
        image: vault:1.15.2
        env:
          VAULT_DEV_ROOT_TOKEN_ID: test-root-token
          VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
        ports:
          - 8200:8200
        options: >-
          --health-cmd="vault status"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --cap-add=IPC_LOCK
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Wait for Vault to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8200/v1/sys/health; do sleep 2; done'
        
    - name: Initialize Vault
      run: |
        export VAULT_ADDR=http://localhost:8200
        export VAULT_TOKEN=test-root-token
        vault secrets enable -path=secret kv-v2
      env:
        VAULT_ADDR: http://localhost:8200
        VAULT_TOKEN: test-root-token
        
    - name: Run integration tests
      run: npm test -- --testPathPattern=integration
      env:
        NODE_ENV: test
        VAULT_ENDPOINT: http://localhost:8200
        VAULT_TOKEN: test-root-token
        VAULT_MOUNT_PATH: secret
        VAULT_VERIFY_TLS: false

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  examples:
    name: Example Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    strategy:
      matrix:
        example: [openai-integration, vllm-integration, python-wrapper]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Python
      if: matrix.example == 'python-wrapper'
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        npm ci
        npm run build
        cd examples && npm install
        
    - name: Test OpenAI integration
      if: matrix.example == 'openai-integration'
      run: cd examples && npm run openai:health
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        
    - name: Test vLLM integration
      if: matrix.example == 'vllm-integration'
      run: cd examples && npm run vllm:health
      # vLLM endpoint would need to be provided for full testing
      
    - name: Test Python wrapper
      if: matrix.example == 'python-wrapper'
      run: cd examples && python3 -c "from python_wrapper import AnonInferProxy; print('‚úÖ Python wrapper OK' if AnonInferProxy().health_check() else '‚ùå Failed')"

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run benchmarks
      run: |
        npm run build
        node -e "
        const { createAnonEngine } = require('./dist/index.js');
        const engine = createAnonEngine();
        
        async function benchmark() {
          const prompt = 'API key sk-' + '1234567890abcdef'.repeat(10);
          const iterations = 1000;
          
          console.log('üèÉ Running performance benchmark...');
          const start = Date.now();
          
          for (let i = 0; i < iterations; i++) {
            const result = await engine.anonymize(prompt);
            await engine.deanonymize(result.anonPrompt, result.mapId, result.signature);
          }
          
          const end = Date.now();
          const totalTime = end - start;
          const avgTime = totalTime / iterations;
          
          console.log(\`‚úÖ Benchmark completed:\`);
          console.log(\`   Total time: \${totalTime}ms\`);
          console.log(\`   Average time: \${avgTime.toFixed(2)}ms per operation\`);
          console.log(\`   Throughput: \${(1000 / avgTime).toFixed(0)} ops/sec\`);
          
          engine.dispose();
        }
        
        benchmark().catch(console.error);
        "

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint, test, security, integration, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build
      
    - name: Generate changelog
      run: |
        git log --oneline --since="1 week ago" > CHANGELOG.md
        echo "Generated changelog for release"
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      if: github.event_name == 'push' && contains(github.event.head_commit.message, 'release:')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.package-version.outputs.version }}
        release_name: Release v${{ steps.package-version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false
        
    - name: Publish to NPM
      if: github.event_name == 'push' && contains(github.event.head_commit.message, 'release:')
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
