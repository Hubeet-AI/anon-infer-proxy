name: Release

on:
  push:
    tags:
      - 'v*'

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate tag format
      run: |
        if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "❌ Invalid tag format: ${{ github.ref_name }}"
          echo "Expected format: v1.2.3 or v1.2.3-beta.1"
          exit 1
        fi
        echo "✅ Valid tag format: ${{ github.ref_name }}"
        
    - name: Extract version info
      id: version
      run: |
        VERSION="${{ github.ref_name }}"
        VERSION="${VERSION#v}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        
        if [[ "${VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        else
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Check package.json version
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        if [[ "${{ steps.version.outputs.version }}" != "${PACKAGE_VERSION}" ]]; then
          echo "❌ Version mismatch:"
          echo "  Tag version: ${{ steps.version.outputs.version }}"
          echo "  Package version: ${PACKAGE_VERSION}"
          exit 1
        fi
        echo "✅ Version matches package.json"

  test-release:
    name: Test Release Build
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run full test suite
      run: |
        npm run lint
        npm run test:coverage
        npm run build
        
    - name: Test package installation
      run: |
        # Test that the package can be installed and imported
        npm pack
        PACKAGE_FILE=$(ls *.tgz)
        
        # Create test directory
        mkdir test-install
        cd test-install
        npm init -y
        npm install ../${PACKAGE_FILE}
        
        # Test basic import
        node -e "
        const { createAnonEngine, AnonymizationStrategy } = require('anon-infer-proxy');
        console.log('✅ Package imports successfully');
        
        const engine = createAnonEngine({
          strategy: AnonymizationStrategy.HASH_SALT,
          enableSignatures: false
        });
        
        engine.anonymize('test prompt sk-123456').then(result => {
          console.log('✅ Basic functionality works');
          engine.dispose();
        }).catch(err => {
          console.error('❌ Basic functionality failed:', err);
          process.exit(1);
        });
        "

  build-release:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: [validate-release, test-release]
    
    outputs:
      docker-digest: ${{ steps.docker.outputs.digest }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build
      
    - name: Create release package
      run: |
        npm pack
        
        # Create release bundle with examples and docs
        mkdir -p release-bundle
        cp *.tgz release-bundle/
        cp -r examples release-bundle/
        cp -r docs release-bundle/
        cp README.md LICENSE CHANGELOG.md release-bundle/
        
        tar -czf anon-infer-proxy-v${{ needs.validate-release.outputs.version }}.tar.gz release-bundle/
        
    - name: Generate checksums
      run: |
        sha256sum *.tgz > checksums.txt
        sha256sum *.tar.gz >> checksums.txt
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Docker image
      id: docker
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.validate-release.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        labels: |
          org.opencontainers.image.title=anon-infer-proxy
          org.opencontainers.image.description=Secure anonymization proxy for LLM inference
          org.opencontainers.image.version=v${{ needs.validate-release.outputs.version }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Upload release assets
      uses: actions/upload-artifact@v3
      with:
        name: release-assets
        path: |
          *.tgz
          *.tar.gz
          checksums.txt

  security-scan:
    name: Final Security Scan
    runs-on: ubuntu-latest
    needs: build-release
    
    steps:
    - name: Run Trivy scan on release image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.validate-release.outputs.version }}
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.validate-release.outputs.version }}
        format: spdx-json
        output-file: sbom.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: sbom.spdx.json

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate-release, test-release, build-release, security-scan]
    environment: npm-publish
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build
      
    - name: Publish to NPM
      run: |
        if [[ "${{ needs.validate-release.outputs.is-prerelease }}" == "true" ]]; then
          npm publish --tag beta --access public
          echo "✅ Published pre-release to NPM with 'beta' tag"
        else
          npm publish --access public
          echo "✅ Published release to NPM"
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, test-release, build-release, security-scan, publish-npm]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Download release assets
      uses: actions/download-artifact@v3
      with:
        name: release-assets
        path: ./assets
        
    - name: Download SBOM
      uses: actions/download-artifact@v3
      with:
        name: sbom
        path: ./assets
        
    - name: Generate release notes
      id: release-notes
      run: |
        # Generate changelog since last tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [[ -n "$PREVIOUS_TAG" ]]; then
          echo "## What's Changed" > release-notes.md
          echo "" >> release-notes.md
          git log --oneline ${PREVIOUS_TAG}..HEAD --pretty=format:"* %s (%h)" >> release-notes.md
          echo "" >> release-notes.md
        else
          echo "## Initial Release" > release-notes.md
          echo "" >> release-notes.md
          echo "First release of anon-infer-proxy 🎉" >> release-notes.md
          echo "" >> release-notes.md
        fi
        
        echo "" >> release-notes.md
        echo "## Docker Image" >> release-notes.md
        echo "" >> release-notes.md
        echo '```bash' >> release-notes.md
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.validate-release.outputs.version }}" >> release-notes.md
        echo '```' >> release-notes.md
        echo "" >> release-notes.md
        echo "## NPM Package" >> release-notes.md
        echo "" >> release-notes.md
        echo '```bash' >> release-notes.md
        echo "npm install anon-infer-proxy@${{ needs.validate-release.outputs.version }}" >> release-notes.md
        echo '```' >> release-notes.md
        echo "" >> release-notes.md
        echo "## Security" >> release-notes.md
        echo "" >> release-notes.md
        echo "- ✅ All security scans passed" >> release-notes.md
        echo "- ✅ Dependencies audited" >> release-notes.md
        echo "- ✅ Container image scanned" >> release-notes.md
        echo "- ✅ SBOM included in release assets" >> release-notes.md
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body_path: release-notes.md
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is-prerelease }}
        
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./assets/anon-infer-proxy-v${{ needs.validate-release.outputs.version }}.tar.gz
        asset_name: anon-infer-proxy-v${{ needs.validate-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload Checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./assets/checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain
        
    - name: Upload SBOM
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./assets/sbom.spdx.json
        asset_name: sbom.spdx.json
        asset_content_type: application/json

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    
    steps:
    - name: Notify release completion
      run: |
        echo "🎉 Release v${{ needs.validate-release.outputs.version }} completed successfully!"
        echo ""
        echo "📦 NPM: https://www.npmjs.com/package/anon-infer-proxy"
        echo "🐳 Docker: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.validate-release.outputs.version }}"
        echo "📋 GitHub: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        
    - name: Update documentation
      run: |
        # Here you could trigger documentation updates, 
        # update package managers, notify communities, etc.
        echo "📚 Documentation and registries will be updated automatically"
