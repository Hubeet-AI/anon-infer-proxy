name: Security

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      
    - name: Run Snyk vulnerability scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium
        
    - name: Upload Snyk results
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: snyk.sarif

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        queries: security-and-quality
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build project
      run: npm run build
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/javascript
          p/typescript
          p/docker
          p/nodejs
        generateSarif: "1"
        
    - name: Upload Semgrep results
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: semgrep.sarif

  crypto-review:
    name: Cryptographic Implementation Review
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run cryptographic tests
      run: npm test -- --testPathPattern="crypto|security" --verbose
      
    - name: Validate crypto implementations
      run: |
        echo "🔍 Checking for weak crypto patterns..."
        
        # Check for weak hash algorithms
        if grep -r "md5\|sha1" src/ --exclude-dir=node_modules; then
          echo "❌ Weak hash algorithms detected"
          exit 1
        else
          echo "✅ No weak hash algorithms found"
        fi
        
        # Check for hardcoded secrets
        if grep -r "secret.*=.*['\"]" src/ --exclude-dir=node_modules | grep -v "process.env\|config\|test"; then
          echo "❌ Potential hardcoded secrets detected"
          exit 1
        else
          echo "✅ No hardcoded secrets found"
        fi
        
        # Check for proper random number generation
        if grep -r "Math.random" src/ --exclude-dir=node_modules; then
          echo "❌ Insecure random number generation detected"
          exit 1
        else
          echo "✅ Secure random number generation verified"
        fi

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: docker build -t anon-infer-proxy:test .
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'anon-infer-proxy:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Docker Bench Security
      run: |
        git clone https://github.com/docker/docker-bench-security.git
        cd docker-bench-security
        sudo sh docker-bench-security.sh -c container_images

  license-scan:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install license checker
      run: npm install -g license-checker
      
    - name: Check licenses
      run: |
        echo "🔍 Checking dependency licenses..."
        license-checker --summary
        
        # Check for GPL licenses (not compatible with MIT)
        if license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' --excludePrivatePackages; then
          echo "✅ All licenses are compatible"
        else
          echo "❌ Incompatible licenses detected"
          license-checker --excludePrivatePackages
          exit 1
        fi

  penetration-test:
    name: Basic Penetration Testing
    runs-on: ubuntu-latest
    
    services:
      vault:
        image: vault:1.15.2
        env:
          VAULT_DEV_ROOT_TOKEN_ID: test-root-token
          VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
        ports:
          - 8200:8200
        options: >-
          --health-cmd="vault status"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
          --cap-add=IPC_LOCK
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build and start service
      run: |
        npm run build
        npm start &
        sleep 10
      env:
        NODE_ENV: test
        VAULT_ENDPOINT: http://localhost:8200
        VAULT_TOKEN: test-root-token
        
    - name: Basic security tests
      run: |
        echo "🔒 Running basic security tests..."
        
        # Test for SQL injection patterns (should not affect this app, but good practice)
        curl -f "http://localhost:3000/health" || echo "Service not responding"
        
        # Test authentication bypass attempts
        curl -f -H "Authorization: Bearer fake-token" "http://localhost:3000/health" || echo "Expected auth failure"
        
        # Test for directory traversal
        curl -f "http://localhost:3000/../../../etc/passwd" && echo "❌ Directory traversal possible" || echo "✅ Directory traversal protected"
        
        # Test CORS headers
        response=$(curl -s -H "Origin: http://malicious.com" "http://localhost:3000/health")
        if echo "$response" | grep -i "access-control-allow-origin"; then
          echo "⚠️ CORS headers present - verify configuration"
        fi

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, secrets-scan, sast-scan, crypto-review, container-scan, license-scan]
    if: always()
    
    steps:
    - name: Generate Security Report
      run: |
        echo "# Security Scan Summary" > security-report.md
        echo "" >> security-report.md
        echo "## Scan Results" >> security-report.md
        echo "" >> security-report.md
        echo "- **Dependency Scan**: ${{ needs.dependency-scan.result }}" >> security-report.md
        echo "- **Secrets Detection**: ${{ needs.secrets-scan.result }}" >> security-report.md
        echo "- **SAST Scan**: ${{ needs.sast-scan.result }}" >> security-report.md
        echo "- **Crypto Review**: ${{ needs.crypto-review.result }}" >> security-report.md
        echo "- **Container Scan**: ${{ needs.container-scan.result }}" >> security-report.md
        echo "- **License Scan**: ${{ needs.license-scan.result }}" >> security-report.md
        echo "" >> security-report.md
        echo "Generated on: $(date)" >> security-report.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md
